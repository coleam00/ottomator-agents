name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.1'

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black isort
    
    - name: Run Ruff linter
      run: |
        ruff check . --config pyproject.toml 2>/dev/null || ruff check .
      continue-on-error: false
    
    - name: Check formatting with Black
      run: |
        black --check --diff .
      continue-on-error: false
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
      continue-on-error: false

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mypy types-requests types-aiofiles types-python-dateutil
    
    - name: Run mypy type checking
      run: |
        mypy agent/ ingestion/ --python-version 3.11 \
          --ignore-missing-imports \
          --no-strict-optional \
          --warn-return-any \
          --warn-unused-configs \
          --disallow-untyped-defs
      continue-on-error: false

  security-check:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit[toml] pip-audit semgrep
    
    - name: Run Safety check for known vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check --json --continue-on-error
      continue-on-error: true
    
    - name: Run Bandit security linter
      run: |
        bandit -r agent/ ingestion/ -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          python -m json.tool bandit-report.json
        fi
      continue-on-error: true
    
    - name: Run pip-audit for dependency vulnerabilities
      run: |
        pip-audit --desc --fix --dry-run
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
        retention-days: 30

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: test_rag_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      neo4j:
        image: neo4j:5-community
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_ACCEPT_LICENSE_AGREEMENT: yes
        ports:
          - 7687:7687
          - 7474:7474
        options: >-
          --health-cmd "neo4j status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-asyncio pytest-xdist pytest-timeout
    
    - name: Set up test environment
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/test_rag_db
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: testpassword
      run: |
        # Wait for services to be ready
        sleep 10
        
        # Create test .env file
        cat > .env.test << EOF
        DATABASE_URL=$DATABASE_URL
        NEO4J_URI=$NEO4J_URI
        NEO4J_USER=$NEO4J_USER
        NEO4J_PASSWORD=$NEO4J_PASSWORD
        LLM_PROVIDER=openai
        LLM_BASE_URL=https://api.openai.com/v1
        LLM_API_KEY=test-key
        LLM_CHOICE=gpt-4o-mini
        EMBEDDING_PROVIDER=openai
        EMBEDDING_BASE_URL=https://api.openai.com/v1
        EMBEDDING_API_KEY=test-key
        EMBEDDING_MODEL=text-embedding-3-small
        APP_ENV=test
        LOG_LEVEL=DEBUG
        EOF
    
    - name: Initialize database schema
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/test_rag_db
      run: |
        # Install psql client
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        
        # Run schema creation
        PGPASSWORD=testpass psql -h localhost -U testuser -d test_rag_db -f sql/schema.sql || true
    
    - name: Run unit tests with coverage
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/test_rag_db
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: testpassword
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/ \
          --cov=agent \
          --cov=ingestion \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --maxfail=5 \
          --timeout=300 \
          -v
      continue-on-error: false
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 30
    
    - name: Check coverage threshold
      run: |
        coverage report --fail-under=70
      continue-on-error: true

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run integration tests
      run: |
        pytest tests/ -m integration --maxfail=3 -v || true
      continue-on-error: true

  build:
    name: Build and Validate
    runs-on: ubuntu-latest
    needs: [test, security-check]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine
    
    - name: Validate requirements.txt
      run: |
        pip check
    
    - name: Test CLI entry point
      run: |
        python cli.py --help || true
    
    - name: Create distribution packages
      run: |
        python -m build --sdist --wheel --outdir dist/ || echo "No setup.py found, skipping build"
    
    - name: Check distribution
      if: success()
      run: |
        if [ -d "dist" ]; then
          twine check dist/* || true
        fi

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        if [ -f "Dockerfile" ]; then
          docker build -t medical-rag-agent:test .
        else
          echo "No Dockerfile found, creating one..."
          cat > Dockerfile << 'EOF'
        FROM python:3.11-slim
        
        WORKDIR /app
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            gcc \
            g++ \
            && rm -rf /var/lib/apt/lists/*
        
        # Copy requirements
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        # Copy application code
        COPY . .
        
        # Set environment variables
        ENV PYTHONUNBUFFERED=1
        ENV APP_HOST=0.0.0.0
        ENV APP_PORT=8058
        
        # Expose port
        EXPOSE 8058
        
        # Run the application
        CMD ["python", "-m", "agent.api"]
        EOF
          docker build -t medical-rag-agent:test .
        fi
    
    - name: Test Docker image
      run: |
        docker run --rm medical-rag-agent:test python --version
name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        
        # Validate semantic version
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Error: Invalid version format. Expected: v1.0.0 or v1.0.0-beta"
          exit 1
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate-version
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine
    
    - name: Run tests
      run: |
        pytest tests/ --maxfail=1
    
    - name: Build package
      run: |
        # Create setup.py if it doesn't exist
        if [ ! -f "setup.py" ]; then
          cat > setup.py << 'EOF'
        from setuptools import setup, find_packages

        with open("README.md", "r", encoding="utf-8") as fh:
            long_description = fh.read()

        with open("requirements.txt", "r", encoding="utf-8") as fh:
            requirements = [line.strip() for line in fh if line.strip() and not line.startswith("#")]

        setup(
            name="medical-rag-agent",
            version="${{ needs.validate-version.outputs.version }}".lstrip("v"),
            author="MaryPause AI",
            author_email="contact@marypause.ai",
            description="Medical RAG Agent with Knowledge Graph",
            long_description=long_description,
            long_description_content_type="text/markdown",
            url="https://github.com/marypause/marypause_ai",
            packages=find_packages(exclude=["tests", "tests.*"]),
            classifiers=[
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "Topic :: Scientific/Engineering :: Artificial Intelligence",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.11",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
            ],
            python_requires=">=3.11",
            install_requires=requirements,
            entry_points={
                "console_scripts": [
                    "medical-rag-cli=cli:main",
                ],
            },
        )
        EOF
        fi
        
        python -m build
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-packages
        path: dist/
        retention-days: 7

  docker-release:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [validate-version, build-and-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/medical-rag-agent
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{version}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.validate-version.outputs.version }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-version, build-and-test, docker-release]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-packages
        path: dist/
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$PREV_TAG" ]; then
          echo "No previous tag found, showing all commits"
          COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
        else
          echo "Previous tag: $PREV_TAG"
          COMMITS=$(git log --pretty=format:"- %s (%h)" "$PREV_TAG"..HEAD --reverse)
        fi
        
        # Create changelog
        cat > CHANGELOG.md << EOF
        ## What's Changed

        ### 🚀 Features
        $(echo "$COMMITS" | grep -E "^- (feat|feature)" || echo "No new features")

        ### 🐛 Bug Fixes
        $(echo "$COMMITS" | grep -E "^- (fix|bugfix)" || echo "No bug fixes")

        ### 📚 Documentation
        $(echo "$COMMITS" | grep -E "^- (docs|doc)" || echo "No documentation changes")

        ### 🔧 Maintenance
        $(echo "$COMMITS" | grep -E "^- (chore|refactor|style|test|ci)" || echo "No maintenance changes")

        ### All Changes
        $COMMITS

        ---
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${{ needs.validate-version.outputs.version }}
        EOF
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.validate-version.outputs.version }}
        name: Release ${{ needs.validate-version.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(needs.validate-version.outputs.version, '-') }}
        files: |
          dist/*
        generate_release_notes: true

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [create-release]
    if: ${{ !contains(needs.validate-version.outputs.version, '-') }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-packages
        path: dist/
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install twine
      run: |
        pip install twine
    
    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/* --skip-existing
      continue-on-error: true
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/* --skip-existing
      continue-on-error: true
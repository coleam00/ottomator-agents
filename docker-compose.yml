version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: medical-rag-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-raguser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ragpass}
      POSTGRES_DB: ${POSTGRES_DB:-medical_rag_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-raguser}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - medical-rag-network

  neo4j:
    image: neo4j:5-community
    container_name: medical-rag-neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password}
      NEO4J_ACCEPT_LICENSE_AGREEMENT: 'yes'
      NEO4J_dbms_memory_pagecache_size: 1G
      NEO4J_dbms_memory_heap_max__size: 1G
      NEO4J_dbms_memory_heap_initial__size: 512M
    ports:
      - "${NEO4J_BOLT_PORT:-7687}:7687"
      - "${NEO4J_HTTP_PORT:-7474}:7474"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD", "neo4j", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - medical-rag-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VERSION: ${VERSION:-dev}
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
    image: medical-rag-agent:${VERSION:-latest}
    container_name: medical-rag-app
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-raguser}:${POSTGRES_PASSWORD:-ragpass}@postgres:5432/${POSTGRES_DB:-medical_rag_db}
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password}
      LLM_PROVIDER: ${LLM_PROVIDER:-openai}
      LLM_BASE_URL: ${LLM_BASE_URL:-https://api.openai.com/v1}
      LLM_API_KEY: ${LLM_API_KEY}
      LLM_CHOICE: ${LLM_CHOICE:-gpt-4o-mini}
      EMBEDDING_PROVIDER: ${EMBEDDING_PROVIDER:-openai}
      EMBEDDING_BASE_URL: ${EMBEDDING_BASE_URL:-https://api.openai.com/v1}
      EMBEDDING_API_KEY: ${EMBEDDING_API_KEY}
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-text-embedding-3-small}
      APP_ENV: ${APP_ENV:-development}
      APP_HOST: 0.0.0.0
      APP_PORT: ${APP_PORT:-8058}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "${APP_PORT:-8058}:${APP_PORT:-8058}"
    volumes:
      - ./medical_docs:/app/medical_docs:ro
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${APP_PORT:-8058}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - medical-rag-network
    restart: unless-stopped

  ingestion:
    build:
      context: .
      dockerfile: Dockerfile
    image: medical-rag-agent:${VERSION:-latest}
    container_name: medical-rag-ingestion
    command: ["python", "-m", "ingestion.ingest", "--verbose"]
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-raguser}:${POSTGRES_PASSWORD:-ragpass}@postgres:5432/${POSTGRES_DB:-medical_rag_db}
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password}
      LLM_PROVIDER: ${LLM_PROVIDER:-openai}
      LLM_BASE_URL: ${LLM_BASE_URL:-https://api.openai.com/v1}
      LLM_API_KEY: ${LLM_API_KEY}
      INGESTION_LLM_CHOICE: ${INGESTION_LLM_CHOICE:-gpt-4o-nano}
      EMBEDDING_PROVIDER: ${EMBEDDING_PROVIDER:-openai}
      EMBEDDING_BASE_URL: ${EMBEDDING_BASE_URL:-https://api.openai.com/v1}
      EMBEDDING_API_KEY: ${EMBEDDING_API_KEY}
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-text-embedding-3-small}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./medical_docs:/app/medical_docs:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - medical-rag-network
    profiles:
      - ingestion

networks:
  medical-rag-network:
    driver: bridge

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs: